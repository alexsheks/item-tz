import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit'
import { RootState } from '../../app/store'
import { Product } from '../../@types/product'
import { fetchProducts } from './productsAPI'

export interface ProductsState {
  products: Product[]
  allProducts: Product[]
  status: 'idle' | 'loading' | 'failed'
}

const initialState: ProductsState = {
  products: [],
  allProducts: [],
  status: 'idle'
}

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const incrementAsync = createAsyncThunk(
  'products/fetchProducts',
  async () => {
    const response = await fetchProducts()
    // The value we return becomes the `fulfilled` action payload
    return response
  }
)

export const productsSlice = createSlice({
  name: 'products',
  initialState,
  reducers: {
    filterByPrice: (state, action: PayloadAction<string>) => {
      const filtered = state.allProducts.filter(
        (product: Product) => product.price === parseInt(action.payload)
      )
      state.products = filtered
    },
    filterByTitleAndDescription: (state, action: PayloadAction<string>) => {
      const filtered = state.allProducts.filter(
        (product: Product) =>
          product.title.includes(action.payload) ||
          product.description.includes(action.payload)
      )
      state.products = filtered
    }
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(incrementAsync.pending, (state) => {
        state.status = 'loading'
      })
      .addCase(incrementAsync.fulfilled, (state, action) => {
        state.status = 'idle'
        state.products = action.payload
        state.allProducts = action.payload
      })
      .addCase(incrementAsync.rejected, (state) => {
        state.status = 'failed'
      })
  }
})

export const { filterByPrice, filterByTitleAndDescription } =
  productsSlice.actions

// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file.
export const selectProducts = (state: RootState) => state.products

export default productsSlice.reducer
